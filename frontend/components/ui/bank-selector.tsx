"use client"

import { useState } from "react"
import { Input } from "@/components/ui/input"
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"
import { Button } from "@/components/ui/button"
import { Search, ChevronDown } from "lucide-react"
import { cn } from "@/lib/utils"

interface Bank {
  code: string
  name: string
  logo: string
  bgColor?: string
}

const banks: Bank[] = [
  { code: 'SBERBANK', name: '–°–±–µ—Ä–±–∞–Ω–∫', logo: 'üíö', bgColor: 'bg-green-50' },
  { code: 'TBANK', name: '–¢-–ë–∞–Ω–∫', logo: '‚ö°', bgColor: 'bg-yellow-50' },
  { code: 'ALFABANK', name: '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫', logo: 'üÖ∞Ô∏è', bgColor: 'bg-red-50' },
  { code: 'VTB', name: '–í–¢–ë', logo: 'üî∑', bgColor: 'bg-blue-50' },
  { code: 'RAIFFEISEN', name: '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω–±–∞–Ω–∫', logo: 'üü°', bgColor: 'bg-yellow-50' },
  { code: 'GAZPROMBANK', name: '–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫', logo: 'üîµ', bgColor: 'bg-blue-50' },
  { code: 'POCHTABANK', name: '–ü–æ—á—Ç–∞ –ë–∞–Ω–∫', logo: 'üìÆ', bgColor: 'bg-purple-50' },
  { code: 'ROSSELKHOZBANK', name: '–†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫', logo: 'üåæ', bgColor: 'bg-green-50' },
  { code: 'URALSIB', name: '–£—Ä–∞–ª—Å–∏–±', logo: 'üíé', bgColor: 'bg-blue-50' },
  { code: 'LOKOBANK', name: '–õ–æ–∫–æ-–ë–∞–Ω–∫', logo: 'üöÇ', bgColor: 'bg-red-50' },
  { code: 'AKBARS', name: '–ê–∫ –ë–∞—Ä—Å –ë–∞–Ω–∫', logo: 'üêÜ', bgColor: 'bg-green-50' },
  { code: 'MKB', name: '–ú–ö–ë', logo: 'üè¶', bgColor: 'bg-red-50' },
  { code: 'SPBBANK', name: '–ë–∞–Ω–∫ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', logo: '‚öì', bgColor: 'bg-blue-50' },
  { code: 'MTSBANK', name: '–ú–¢–° –ë–∞–Ω–∫', logo: 'üì±', bgColor: 'bg-red-50' },
  { code: 'PROMSVYAZBANK', name: '–ü—Ä–æ–º—Å–≤—è–∑—å–±–∞–Ω–∫', logo: 'üîó', bgColor: 'bg-orange-50' },
  { code: 'OZONBANK', name: '–û–∑–æ–Ω –ë–∞–Ω–∫', logo: 'üõí', bgColor: 'bg-purple-50' },
  { code: 'RENAISSANCE', name: '–†–µ–Ω–µ—Å—Å–∞–Ω—Å –ö—Ä–µ–¥–∏—Ç', logo: 'üé≠', bgColor: 'bg-orange-50' },
  { code: 'OTPBANK', name: '–û–¢–ü –ë–∞–Ω–∫', logo: 'üèõÔ∏è', bgColor: 'bg-green-50' },
  { code: 'AVANGARD', name: '–ê–≤–∞–Ω–≥–∞—Ä–¥', logo: 'üõ°Ô∏è', bgColor: 'bg-red-50' },
  { code: 'VLADBUSINESSBANK', name: '–í–ª–∞–¥–±–∏–∑–Ω–µ—Å–±–∞–Ω–∫', logo: 'üè¢', bgColor: 'bg-blue-50' },
  { code: 'TAVRICHESKIY', name: '–¢–∞–≤—Ä–∏—á–µ—Å–∫–∏–π', logo: 'üèîÔ∏è', bgColor: 'bg-green-50' },
  { code: 'FORABANK', name: '–§–æ—Ä–∞-–ë–∞–Ω–∫', logo: 'üéØ', bgColor: 'bg-yellow-50' },
  { code: 'BCSBANK', name: '–ë–ö–° –ë–∞–Ω–∫', logo: 'üìà', bgColor: 'bg-blue-50' },
  { code: 'HOMECREDIT', name: '–•–æ—É–º –ö—Ä–µ–¥–∏—Ç', logo: 'üè†', bgColor: 'bg-red-50' },
  { code: 'BBRBANK', name: '–ë–ë–† –ë–∞–Ω–∫', logo: 'üåü', bgColor: 'bg-green-50' },
  { code: 'CREDITEUROPE', name: '–ö—Ä–µ–¥–∏—Ç –ï–≤—Ä–æ–ø–∞ –ë–∞–Ω–∫', logo: 'üá™üá∫', bgColor: 'bg-red-50' },
  { code: 'RNKB', name: '–†–ù–ö–ë', logo: 'üèõÔ∏è', bgColor: 'bg-blue-50' },
  { code: 'UBRIR', name: '–£–ë–†–∏–†', logo: 'üèîÔ∏è', bgColor: 'bg-yellow-50' },
  { code: 'GENBANK', name: '–ì–µ–Ω–±–∞–Ω–∫', logo: 'üß¨', bgColor: 'bg-red-50' },
  { code: 'SINARA', name: '–°–∏–Ω–∞—Ä–∞', logo: 'üöÑ', bgColor: 'bg-green-50' },
  { code: 'ABSOLUTBANK', name: '–ê–±—Å–æ–ª—é—Ç –ë–∞–Ω–∫', logo: 'üíØ', bgColor: 'bg-red-50' },
  { code: 'MTSMONEY', name: '–ú–¢–° –î–µ–Ω—å–≥–∏', logo: 'üì±', bgColor: 'bg-red-50' },
  { code: 'SVOYBANK', name: '–°–≤–æ–π –ë–∞–Ω–∫', logo: 'üèòÔ∏è', bgColor: 'bg-purple-50' },
  { code: 'TRANSKAPITALBANK', name: '–¢—Ä–∞–Ω—Å–∫–∞–ø–∏—Ç–∞–ª–±–∞–Ω–∫', logo: 'üí∏', bgColor: 'bg-blue-50' },
  { code: 'DOLINSK', name: '–î–æ–ª–∏–Ω—Å–∫', logo: 'üèûÔ∏è', bgColor: 'bg-green-50' },
  { code: 'SOVCOMBANK', name: '–°–æ–≤–∫–æ–º–±–∞–Ω–∫', logo: 'üé™', bgColor: 'bg-red-50' },
  { code: 'ROSBANK', name: '–†–æ—Å–±–∞–Ω–∫', logo: 'üåπ', bgColor: 'bg-green-50' },
  { code: 'UNICREDIT', name: '–Æ–Ω–∏–ö—Ä–µ–¥–∏—Ç –ë–∞–Ω–∫', logo: 'ü¶Ñ', bgColor: 'bg-red-50' },
  { code: 'CITIBANK', name: '–°–∏—Ç–∏–±–∞–Ω–∫', logo: 'üåÉ', bgColor: 'bg-blue-50' },
  { code: 'RUSSIANSTANDARD', name: '–†—É—Å—Å–∫–∏–π –°—Ç–∞–Ω–¥–∞—Ä—Ç', logo: 'ü¶Ö', bgColor: 'bg-red-50' },
]

interface BankSelectorProps {
  value: string
  onChange: (value: string) => void
  className?: string
}

export function BankSelector({ value, onChange, className }: BankSelectorProps) {
  const [open, setOpen] = useState(false)
  const [search, setSearch] = useState('')

  const selectedBank = banks.find(bank => bank.code === value)
  const filteredBanks = banks.filter(bank => 
    bank.name.toLowerCase().includes(search.toLowerCase()) ||
    bank.code.toLowerCase().includes(search.toLowerCase())
  )

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          role="combobox"
          aria-expanded={open}
          className={cn("w-full justify-between", className)}
        >
          {selectedBank ? (
            <div className="flex items-center gap-3">
              <div className={cn(
                "w-8 h-8 rounded-md flex items-center justify-center text-lg",
                selectedBank.bgColor
              )}>
                {selectedBank.logo}
              </div>
              <span className="text-left">{selectedBank.name}</span>
            </div>
          ) : (
            <span className="text-muted-foreground">–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫</span>
          )}
          <ChevronDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-full p-0" align="start">
        <div className="p-3 border-b">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="–ü–æ–∏—Å–∫ –±–∞–Ω–∫–∞..."
              value={search}
              onChange={(e) => setSearch(e.target.value)}
              className="pl-9"
              autoFocus
            />
          </div>
        </div>
        <div className="max-h-[300px] overflow-y-auto">
          {filteredBanks.length > 0 ? (
            <div className="p-1">
              {filteredBanks.map((bank) => (
                <button
                  key={bank.code}
                  onClick={() => {
                    onChange(bank.code)
                    setOpen(false)
                    setSearch('')
                  }}
                  className={cn(
                    "flex items-center gap-3 w-full px-3 py-2.5 rounded-md hover:bg-accent transition-colors text-left",
                    value === bank.code && "bg-accent"
                  )}
                >
                  <div className={cn(
                    "w-10 h-10 rounded-md flex items-center justify-center text-xl flex-shrink-0",
                    bank.bgColor
                  )}>
                    {bank.logo}
                  </div>
                  <div className="flex-1 min-w-0">
                    <div className="font-medium text-sm">{bank.name}</div>
                    <div className="text-xs text-muted-foreground">{bank.code}</div>
                  </div>
                </button>
              ))}
            </div>
          ) : (
            <div className="px-3 py-8 text-center">
              <div className="text-muted-foreground text-sm">–ë–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω</div>
              <div className="text-xs text-muted-foreground mt-1">
                –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
              </div>
            </div>
          )}
        </div>
      </PopoverContent>
    </Popover>
  )
}