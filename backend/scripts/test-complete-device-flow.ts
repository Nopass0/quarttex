import { httpClient } from "../src/utils/httpClient"
import { db } from "../src/db"

async function testCompleteDeviceFlow() {
  try {
    console.log("üß™ Testing complete device flow from trader perspective...\n")
    
    // 1. –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–π–¥–µ—Ä–∞
    const trader = await db.user.findFirst({
      where: { email: "trader@example.com" }
    })
    
    if (!trader) {
      console.log("‚ùå Trader not found")
      return
    }
    
    console.log("‚úÖ Found trader:", trader.email)
    
    // 2. –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–Ω —Ç—Ä–µ–π–¥–µ—Ä–∞ (–ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω)
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ UI
    const traderSession = await db.session.create({
      data: {
        token: `test-trader-session-${Date.now()}`,
        userId: trader.id,
        ip: "127.0.0.1",
        expiredAt: new Date(Date.now() + 24 * 60 * 60 * 1000) // 24 hours
      }
    })
    
    console.log("üîë Created trader session:", traderSession.token)
    
    // 3. –°–æ–∑–¥–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —á–µ—Ä–µ–∑ API —Ç—Ä–µ–π–¥–µ—Ä–∞
    console.log("\nüì± Creating device via trader API...")
    
    const createDeviceResponse = await httpClient.post(
      "http://localhost:3000/api/trader/devices", 
      {
        name: "Samsung Galaxy S23"
      },
      {
        headers: {
          "x-trader-token": traderSession.token
        }
      }
    )
    
    console.log("üì° Create device response:", JSON.stringify(createDeviceResponse, null, 2))
    
    if (!createDeviceResponse.id) {
      console.log("‚ùå Failed to create device")
      return
    }
    
    const deviceToken = createDeviceResponse.token
    console.log("üîë Device token (QR code content):", deviceToken)
    
    // 4. –°–æ–∑–¥–∞–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Ä–µ–∫–≤–∏–∑–∏—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log("\nüè¶ Creating bank detail...")
    const createBankDetailResponse = await httpClient.post(
      "http://localhost:3000/api/trader/bank-details",
      {
        methodType: "c2c",
        bankType: "SBERBANK",
        cardNumber: "4444555566667777",
        recipientName: "Test Trader",
        phoneNumber: "+79001234567",
        minAmount: 100,
        maxAmount: 50000,
        dailyLimit: 500000,
        monthlyLimit: 5000000,
        intervalMinutes: 0
      },
      {
        headers: {
          "x-trader-token": traderSession.token
        }
      }
    )
    
    console.log("üí≥ Bank detail created:", createBankDetailResponse.id)
    
    // 5. –¢–µ–ø–µ—Ä—å —Å–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–∫–µ–Ω –∏–∑ QR –∫–æ–¥–∞)
    console.log("\nüîå Connecting device using QR code token...")
    
    const connectResponse = await httpClient.post("http://localhost:3000/api/device/connect", {
      deviceCode: deviceToken, // –≠—Ç–æ —Ç–æ, —á—Ç–æ –±—É–¥–µ—Ç –≤ QR –∫–æ–¥–µ
      batteryLevel: 85,
      networkInfo: "Wi-Fi",
      deviceModel: "Samsung Galaxy S23",
      androidVersion: "13",
      appVersion: "2.0.0",
    })
    
    console.log("üì° Connect response:", JSON.stringify(connectResponse, null, 2))
    
    if (connectResponse.status === "success") {
      console.log("\n‚úÖ Device connected successfully!")
      console.log("   Authentication token:", connectResponse.token)
      
      // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç
      if (connectResponse.token === deviceToken) {
        console.log("‚úÖ Token match confirmed!")
      } else {
        console.log("‚ùå Token mismatch!")
        console.log("   Expected:", deviceToken)
        console.log("   Received:", connectResponse.token)
      }
      
      // 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      console.log("\nüìä Testing device info update...")
      const updateResponse = await httpClient.post(
        "http://localhost:3000/api/device/info/update",
        {
          batteryLevel: 78,
          networkInfo: "4G",
          isCharging: false,
          timestamp: Date.now(),
        },
        {
          headers: {
            Authorization: `Bearer ${connectResponse.token}`,
          },
        }
      )
      
      console.log("   Update response:", updateResponse)
      
      // 8. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      console.log("\nüì¨ Testing notification send...")
      const notificationResponse = await httpClient.post(
        "http://localhost:3000/api/device/notification",
        {
          packageName: "ru.sberbank.android",
          appName: "–°–±–µ—Ä–ë–∞–Ω–∫ –û–Ω–ª–∞–π–Ω",
          title: "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ",
          content: "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ 5,000 ‚ÇΩ –æ—Ç –¢–µ—Å—Ç –¢. –ë–∞–ª–∞–Ω—Å: 25,000 ‚ÇΩ",
          timestamp: Date.now(),
          priority: 1,
          category: "msg",
        },
        {
          headers: {
            Authorization: `Bearer ${connectResponse.token}`,
          },
        }
      )
      
      console.log("   Notification response:", notificationResponse)
      
      // 9. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ API —Ç—Ä–µ–π–¥–µ—Ä–∞
      console.log("\nüîç Checking device status via trader API...")
      const deviceStatusResponse = await httpClient.get(
        `http://localhost:3000/api/trader/devices/${createDeviceResponse.id}`,
        {
          headers: {
            "x-trader-token": traderSession.token
          }
        }
      )
      
      console.log("üì± Device status:")
      console.log("   Name:", deviceStatusResponse.name)
      console.log("   Online:", deviceStatusResponse.isOnline)
      console.log("   Energy:", deviceStatusResponse.energy)
      console.log("   Notifications:", deviceStatusResponse.notifications)
      console.log("   Recent notifications:", deviceStatusResponse.recentNotifications?.length || 0)
      
      console.log("\nüéâ Complete device flow test passed!")
      console.log("\nüìù Summary:")
      console.log("   1. ‚úÖ Trader created device via UI")
      console.log("   2. ‚úÖ Device token generated for QR code")
      console.log("   3. ‚úÖ Bank detail created")
      console.log("   4. ‚úÖ Device connected using QR code token")
      console.log("   5. ‚úÖ Device info updates working")
      console.log("   6. ‚úÖ Notifications working")
      console.log("   7. ‚úÖ Trader can see device status")
      
    } else {
      console.log("\n‚ùå Failed to connect device:", connectResponse)
    }
    
  } catch (error: any) {
    console.error("\n‚ùå Error:", error.message || error)
    if (error.response) {
      console.error("   Response:", error.response)
    }
  } finally {
    await db.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testCompleteDeviceFlow()