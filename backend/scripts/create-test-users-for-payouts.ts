#!/usr/bin/env bun
import { db } from "../src/db";
import bcrypt from "bcrypt";

async function createTestUsers() {
  console.log("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–ø–ª–∞—Ç...");

  try {
    // –°–æ–∑–¥–∞–¥–∏–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–µ—Ä—á–∞–Ω—Ç–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    let testMerchant = await db.merchant.findFirst({
      where: {
        name: {
          contains: "test",
          mode: 'insensitive'
        }
      }
    });

    if (!testMerchant) {
      console.log("üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–µ—Ä—á–∞–Ω—Ç–∞...");
      
      // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º–µ—Ä—á–∞–Ω—Ç–∞
      const merchantUser = await db.user.create({
        data: {
          username: "test_merchant",
          password: await bcrypt.hash("password123", 10),
          role: "MERCHANT"
        }
      });

      testMerchant = await db.merchant.create({
        data: {
          id: merchantUser.id,
          name: "Test Merchant",
          token: `test_merchant_${Date.now()}`,
          balanceUsdt: 100000
        }
      });

      console.log("‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –º–µ—Ä—á–∞–Ω—Ç:", testMerchant.name);
    } else {
      console.log("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ä—á–∞–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:", testMerchant.name);
    }

    // –°–æ–∑–¥–∞–¥–∏–º —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –µ—Å–ª–∏ –∏—Ö –º–∞–ª–æ
    const existingTraders = await db.user.count({
      where: { role: 'TRADER' }
    });

    if (existingTraders < 5) {
      console.log(`üìù –°–æ–∑–¥–∞–µ–º ${5 - existingTraders} —Ç—Ä–µ–π–¥–µ—Ä–æ–≤...`);
      
      for (let i = existingTraders; i < 5; i++) {
        const trader = await db.user.create({
          data: {
            username: `trader${i + 1}`,
            password: await bcrypt.hash("password123", 10),
            role: "TRADER"
          }
        });

        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç—Ä–µ–π–¥–µ—Ä: ${trader.username}`);
      }
    } else {
      console.log("‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
    }

    console.log("\n‚ú® –í—Å–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤—ã–ø–ª–∞—Ç!");
    console.log("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å: bun run scripts/generate-test-payouts.ts");

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error);
  } finally {
    await db.$disconnect();
  }
}

createTestUsers();