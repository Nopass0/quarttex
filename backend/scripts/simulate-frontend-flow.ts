import { httpClient } from "../src/utils/httpClient"
import { db } from "../src/db"

async function simulateFrontendFlow() {
  try {
    console.log("üé≠ Simulating complete frontend flow...\n")
    
    const trader = await db.user.findFirst({
      where: { email: "trader@example.com" }
    })
    
    if (!trader) {
      console.log("‚ùå Trader not found")
      return
    }
    
    // 1. –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–Ω —Ç—Ä–µ–π–¥–µ—Ä–∞
    const session = await db.session.create({
      data: {
        token: `frontend-flow-${Date.now()}`,
        userId: trader.id,
        ip: "127.0.0.1",
        expiredAt: new Date(Date.now() + 24 * 60 * 60 * 1000)
      }
    })
    
    console.log("üîë Created session:", session.token.substring(0, 20) + "...")
    
    // 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥)
    console.log("\nüì± Step 1: Getting devices list...")
    const devicesResponse = await httpClient.get(
      "http://localhost:3000/api/trader/devices",
      { headers: { "x-trader-token": session.token } }
    )
    
    console.log(`‚úÖ Found ${devicesResponse.length} devices`)
    
    if (devicesResponse.length === 0) {
      console.log("No devices found. Creating one...")
      
      // –°–æ–∑–¥–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
      const newDevice = await httpClient.post(
        "http://localhost:3000/api/trader/devices", 
        { name: "Frontend Flow Test Device" },
        { headers: { "x-trader-token": session.token } }
      )
      
      console.log("‚úÖ Created device:", newDevice.id)
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–Ω–æ–≤–∞
      const devicesAfterCreate = await httpClient.get(
        "http://localhost:3000/api/trader/devices",
        { headers: { "x-trader-token": session.token } }
      )
      
      console.log(`‚úÖ After creation: ${devicesAfterCreate.length} devices`)
    }
    
    // 3. –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const firstDevice = devicesResponse[0] || (await httpClient.get(
      "http://localhost:3000/api/trader/devices",
      { headers: { "x-trader-token": session.token } }
    ))[0]
    
    if (firstDevice) {
      console.log(`\nüîç Step 2: Getting device details for ${firstDevice.name}...`)
      
      try {
        const deviceDetails = await httpClient.get(
          `http://localhost:3000/api/trader/devices/${firstDevice.id}`,
          { headers: { "x-trader-token": session.token } }
        )
        
        console.log("‚úÖ Device details retrieved:")
        console.log(`   Name: ${deviceDetails.name}`)
        console.log(`   Online: ${deviceDetails.isOnline}`)
        console.log(`   Energy: ${deviceDetails.energy}`)
        console.log(`   Bank Details: ${deviceDetails.linkedBankDetails?.length || 0}`)
        console.log(`   Notifications: ${deviceDetails.notifications}`)
        
      } catch (error: any) {
        console.log("‚ùå Error getting device details:", error.message)
        console.log("   This could be why frontend shows device as 'disappeared'")
      }
    }
    
    // 4. –ü–æ–ª—É—á–∞–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
    console.log("\nüè¶ Step 3: Getting bank details...")
    const bankDetails = await httpClient.get(
      "http://localhost:3000/api/trader/bank-details",
      { headers: { "x-trader-token": session.token } }
    )
    
    console.log(`‚úÖ Found ${bankDetails.length} bank details`)
    
    // 5. –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞
    console.log("\nü§ñ Step 4: Simulating emulator config change...")
    
    const emulatorConfig = {
      global: {
        defaultPingSec: 45,
        defaultNotifyChance: 0.6,
        defaultSpamChance: 0.1,
        defaultDelayChance: 0.1,
        reconnectOnAuthError: true,
      },
      devices: [
        {
          deviceCode: "test-emulated-device-123456",
          bankType: "SBER",
          model: "Emulated Test",
          androidVersion: "13",
          initialBattery: 90,
          pingSec: 45,
          notifyChance: 0.9,
          spamChance: 0.1,
          delayChance: 0.1
        }
      ]
    }
    
    await db.serviceConfig.upsert({
      where: { serviceKey: "device_emulator" },
      create: {
        serviceKey: "device_emulator",
        config: emulatorConfig,
        isEnabled: true,
      },
      update: {
        config: emulatorConfig,
        isEnabled: true,
      }
    })
    
    console.log("‚úÖ Emulator config changed")
    
    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    console.log("\nüì± Step 5: Checking devices after config change...")
    
    try {
      const devicesAfterConfig = await httpClient.get(
        "http://localhost:3000/api/trader/devices",
        { headers: { "x-trader-token": session.token } }
      )
      
      console.log(`‚úÖ Found ${devicesAfterConfig.length} devices after config change`)
      
      if (firstDevice) {
        try {
          const deviceDetailsAfter = await httpClient.get(
            `http://localhost:3000/api/trader/devices/${firstDevice.id}`,
            { headers: { "x-trader-token": session.token } }
          )
          
          console.log("‚úÖ Device details still accessible after config change")
          
        } catch (error: any) {
          console.log("‚ùå Device details not accessible after config change:", error.message)
          console.log("   This is likely the source of the 'disappeared device' issue")
        }
      }
      
    } catch (error: any) {
      console.log("‚ùå Error getting devices after config change:", error.message)
    }
    
    console.log("\nüìä Summary:")
    console.log("   This simulation tests the exact flow that frontend uses")
    console.log("   If any step fails, it could explain why devices 'disappear'")
    
  } catch (error: any) {
    console.error("\n‚ùå Error in simulation:", error.message || error)
  } finally {
    await db.$disconnect()
  }
}

simulateFrontendFlow()