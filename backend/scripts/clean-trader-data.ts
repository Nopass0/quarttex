import { db } from "../src/db"

async function cleanTraderData() {
  try {
    console.log("üßπ Cleaning data for trader@example.com...\n")
    
    // –ù–∞–π—Ç–∏ —Ç—Ä–µ–π–¥–µ—Ä–∞
    const trader = await db.user.findFirst({
      where: { email: "trader@example.com" },
      include: {
        devices: true,
        bankDetails: true
      }
    })
    
    if (!trader) {
      console.log("‚ùå Trader not found")
      return
    }
    
    console.log("‚úÖ Found trader:", trader.email)
    console.log(`   Devices: ${trader.devices.length}`)
    console.log(`   Bank details: ${trader.bankDetails.length}`)
    
    // 1. –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ —Ç—Ä–µ–π–¥–µ—Ä–∞
    if (trader.devices.length > 0) {
      console.log("\nüì¨ Deleting notifications for trader's devices...")
      const deviceIds = trader.devices.map(d => d.id)
      
      const deletedNotifications = await db.notification.deleteMany({
        where: {
          deviceId: { in: deviceIds }
        }
      })
      
      console.log(`   Deleted ${deletedNotifications.count} notifications`)
    }
    
    // 2. –£–¥–∞–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞
    console.log("\nüì± Deleting trader's devices...")
    const deletedDevices = await db.device.deleteMany({
      where: {
        userId: trader.id
      }
    })
    
    console.log(`   Deleted ${deletedDevices.count} devices`)
    
    // 3. –£–¥–∞–ª—è–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Ç—Ä–µ–π–¥–µ—Ä–∞
    console.log("\nüè¶ Deleting trader's bank details...")
    const deletedBankDetails = await db.bankDetail.deleteMany({
      where: {
        userId: trader.id
      }
    })
    
    console.log(`   Deleted ${deletedBankDetails.count} bank details`)
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const updatedTrader = await db.user.findFirst({
      where: { email: "trader@example.com" },
      include: {
        devices: true,
        bankDetails: true
      }
    })
    
    console.log("\nüìä Final status for trader@example.com:")
    console.log(`   Devices: ${updatedTrader?.devices.length || 0}`)
    console.log(`   Bank details: ${updatedTrader?.bankDetails.length || 0}`)
    console.log(`   Balance RUB: ${updatedTrader?.balanceRub || 0}`)
    console.log(`   Balance USDT: ${updatedTrader?.balanceUsdt || 0}`)
    
    console.log("\n‚úÖ Trader data cleaned successfully!")
    
  } catch (error) {
    console.error("\n‚ùå Error:", error)
  } finally {
    await db.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏
cleanTraderData()