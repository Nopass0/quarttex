import { httpClient } from "../src/utils/httpClient"
import { db } from "../src/db"

async function setupTestEnvironment() {
  try {
    console.log("üèóÔ∏è Setting up comprehensive test environment...\n")
    
    // 1. –ù–∞–π–¥–µ–º —Ç—Ä–µ–π–¥–µ—Ä–∞ –∏ —Å–æ–∑–¥–∞–¥–∏–º —Å–µ—Å—Å–∏—é
    const trader = await db.user.findFirst({
      where: { email: "trader@example.com" },
      include: {
        sessions: {
          where: { expiredAt: { gt: new Date() } },
          orderBy: { createdAt: 'desc' },
          take: 1
        }
      }
    })
    
    if (!trader) {
      console.log("‚ùå Trader not found")
      return
    }
    
    let sessionToken = trader.sessions[0]?.token
    if (!sessionToken) {
      const session = await db.session.create({
        data: {
          token: `test-session-${Date.now()}`,
          userId: trader.id,
          ip: "127.0.0.1",
          expiredAt: new Date(Date.now() + 24 * 60 * 60 * 1000)
        }
      })
      sessionToken = session.token
      console.log("üîë Created test session")
    }
    
    console.log(`‚úÖ Found trader: ${trader.email}`)
    
    // 2. –°–æ–∑–¥–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —á–µ—Ä–µ–∑ API
    console.log("\nüì± Creating device...")
    const deviceResponse = await httpClient.post(
      "http://localhost:3000/api/trader/devices",
      {
        name: "Test Device for Notification Matching"
      },
      {
        headers: { "x-trader-token": sessionToken }
      }
    )
    
    console.log(`‚úÖ Device created: ${deviceResponse.name}`)
    console.log(`   ID: ${deviceResponse.id}`)
    console.log(`   Token: ${deviceResponse.token.substring(0, 20)}...`)
    
    // 3. –°–æ–∑–¥–∞–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Ä–µ–∫–≤–∏–∑–∏—Ç –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
    console.log("\nüè¶ Creating bank detail...")
    const bankDetailResponse = await httpClient.post(
      "http://localhost:3000/api/trader/bank-details",
      {
        cardNumber: "4444555566667777",
        bankType: "SBER",
        methodType: "c2c",
        recipientName: "–¢–µ—Å—Ç–æ–≤–∏—á –¢–µ—Å—Ç",
        phoneNumber: "+79001234567",
        minAmount: 100,
        maxAmount: 50000,
        dailyLimit: 500000,
        monthlyLimit: 5000000,
        intervalMinutes: 0,
        deviceId: deviceResponse.id
      },
      {
        headers: { "x-trader-token": sessionToken }
      }
    )
    
    console.log(`‚úÖ Bank detail created and linked`)
    console.log(`   Recipient: ${bankDetailResponse.recipientName}`)
    console.log(`   Bank: ${bankDetailResponse.bankType}`)
    
    // 4. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏
    console.log("\nüí∞ Creating test transactions...")
    const testAmounts = [1000, 2500, 5000, 7500, 10000, 15000, 25000, 35000, 50000]
    const createdTransactions = []
    
    for (const amount of testAmounts) {
      try {
        const transaction = await db.transaction.create({
          data: {
            amount,
            currency: "RUB",
            status: "CREATED", // –ê–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è matching
            type: "IN",
            bankDetailId: bankDetailResponse.id,
            userId: trader.id,
            merchantTransactionId: `test-matching-${amount}-${Date.now()}`,
            description: `Test transaction for notification matching: ${amount} RUB`,
            metadata: {
              testTransaction: true,
              notificationMatching: true,
              expectedAmount: amount
            }
          }
        })
        
        createdTransactions.push(transaction)
        console.log(`   ‚úÖ Transaction: ${amount} RUB (${transaction.id})`)
        
      } catch (error) {
        console.log(`   ‚ö†Ô∏è  Failed to create transaction ${amount}: ${error}`)
      }
    }
    
    console.log(`‚úÖ Created ${createdTransactions.length} test transactions`)
    
    // 5. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Device Emulator Service
    console.log("\nü§ñ Configuring Device Emulator Service...")
    const emulatorConfig = {
      global: {
        defaultPingSec: 20,
        defaultNotifyChance: 0.9,
        defaultSpamChance: 0.05,
        defaultDelayChance: 0.1,
        reconnectOnAuthError: true,
        rngSeed: Date.now()
      },
      devices: [
        {
          deviceCode: deviceResponse.token,
          bankType: "SBER",
          model: deviceResponse.name,
          androidVersion: "13",
          initialBattery: 85,
          pingSec: 20, // –ö–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥
          notifyChance: 0.95, // 95% —à–∞–Ω—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          spamChance: 0.03, // 3% —Å–ø–∞–º
          delayChance: 0.1,
          testAmounts: testAmounts // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å—É–º–º—ã
        }
      ]
    }
    
    await db.serviceConfig.upsert({
      where: { serviceKey: "device_emulator" },
      create: {
        serviceKey: "device_emulator",
        config: emulatorConfig,
        isEnabled: true,
      },
      update: {
        config: emulatorConfig,
        isEnabled: true,
      }
    })
    
    console.log("‚úÖ Device Emulator Service configured")
    console.log(`   Device: ${deviceResponse.token.substring(0, 20)}...`)
    console.log("   Frequency: every 20 seconds")
    console.log("   Notification rate: 95%")
    
    // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    console.log("\nüîå Testing device connection...")
    try {
      const connectResponse = await httpClient.post("http://localhost:3000/api/device/connect", {
        deviceCode: deviceResponse.token,
        batteryLevel: 85,
        networkInfo: "Wi-Fi",
        deviceModel: deviceResponse.name,
        androidVersion: "13",
        appVersion: "2.0.0",
      })
      
      console.log("‚úÖ Device connection successful")
      console.log(`   Auth token: ${connectResponse.token.substring(0, 20)}...`)
      
      // 7. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —Ç–æ—á–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏
      console.log("\nüì¨ Sending test notifications with matching amounts...")
      
      const testNotificationAmounts = [1000, 5000, 25000] // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É–º–º—ã –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      
      for (const amount of testNotificationAmounts) {
        try {
          await httpClient.post(
            "http://localhost:3000/api/device/notification",
            {
              packageName: "ru.sberbank.android",
              appName: "–°–±–µ—Ä–ë–∞–Ω–∫ –û–Ω–ª–∞–π–Ω",
              title: "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ",
              content: `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ ${amount.toLocaleString('ru-RU')} ‚ÇΩ –æ—Ç –¢–µ—Å—Ç –¢. –ë–∞–ª–∞–Ω—Å: ${(amount * 5).toLocaleString('ru-RU')} ‚ÇΩ`,
              timestamp: Date.now(),
              priority: 1,
              category: "msg",
            },
            {
              headers: {
                Authorization: `Bearer ${connectResponse.token}`,
              },
            }
          )
          
          console.log(`   ‚úÖ Test notification sent: ${amount} RUB`)
          
          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
          await new Promise(resolve => setTimeout(resolve, 1000))
          
        } catch (error: any) {
          console.log(`   ‚ùå Failed to send notification for ${amount}: ${error.message}`)
        }
      }
      
    } catch (error: any) {
      console.log(`‚ùå Device connection failed: ${error.message}`)
    }
    
    // 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    console.log("\nüì¨ Checking created notifications...")
    const notifications = await db.notification.findMany({
      where: {
        deviceId: deviceResponse.id,
        createdAt: {
          gte: new Date(Date.now() - 5 * 60 * 1000) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
        }
      },
      orderBy: { createdAt: 'desc' },
      take: 10
    })
    
    console.log(`‚úÖ Found ${notifications.length} recent notifications`)
    notifications.forEach((notif, index) => {
      const content = notif.message?.substring(0, 50) || notif.title
      console.log(`   ${index + 1}. ${content}...`)
    })
    
    // 9. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
    console.log("\nüéâ Test Environment Setup Complete!")
    console.log("\nüìä Summary:")
    console.log(`   ‚úÖ Device: ${deviceResponse.name}`)
    console.log(`   ‚úÖ Bank Detail: ${bankDetailResponse.recipientName} (${bankDetailResponse.bankType})`)
    console.log(`   ‚úÖ Test Transactions: ${createdTransactions.length} with amounts ${testAmounts.slice(0, 5)}...`)
    console.log(`   ‚úÖ Device Emulator: Configured with 95% notification rate every 20s`)
    console.log(`   ‚úÖ Test Notifications: Sent ${testNotificationAmounts.length} notifications`)
    
    console.log("\nüî¨ Testing Goals:")
    console.log("   1. Device Emulator Service generates notifications frequently")
    console.log("   2. Notifications use real transaction amounts for high matching probability")
    console.log("   3. Notification matching service detects matches")
    console.log("   4. Matched transactions change status to indicate successful matching")
    
    console.log("\nüìã Monitoring:")
    console.log(`   - Device ID: ${deviceResponse.id}`)
    console.log(`   - Device Token: ${deviceResponse.token.substring(0, 20)}...`)
    console.log(`   - Bank Detail ID: ${bankDetailResponse.id}`)
    console.log("   - Check notifications table for new entries")
    console.log("   - Monitor transaction status changes")
    console.log("   - Watch for matching service logs")
    
    console.log("\n‚ö° Expected Results:")
    console.log("   - Notifications every ~20 seconds")
    console.log("   - Many notifications with amounts from active transactions")
    console.log("   - High success rate in notification-transaction matching")
    console.log("   - Rapid status updates for matched transactions")
    
  } catch (error: any) {
    console.error("\n‚ùå Setup error:", error.message || error)
    if (error.response) {
      console.error("Response:", JSON.stringify(error.response, null, 2))
    }
  } finally {
    await db.$disconnect()
  }
}

setupTestEnvironment()