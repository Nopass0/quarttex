#!/usr/bin/env bun
import { db } from "../src/db";
import { PayoutStatus } from "@prisma/client";

async function generateSimplePayouts() {
  console.log("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤—ã–ø–ª–∞—Ç...");

  try {
    // –ù–∞–π–¥–µ–º –ª—é–±–æ–≥–æ –º–µ—Ä—á–∞–Ω—Ç–∞
    const merchant = await db.merchant.findFirst();
    
    if (!merchant) {
      console.error("‚ùå –ú–µ—Ä—á–∞–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
      return;
    }

    console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ä—á–∞–Ω—Ç–∞: ${merchant.name}`);

    // –ù–∞–π–¥–µ–º –ª—é–±—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç—Ä–µ–π–¥–µ—Ä–æ–≤)
    const users = await db.user.findMany({
      take: 5,
      where: {
        balanceRub: {
          gte: 0
        }
      }
    });

    if (users.length === 0) {
      console.error("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–ø–ª–∞—Ç
    const payoutData = [
      { amount: 5000, wallet: "79001234567", bank: "–¢–∏–Ω—å–∫–æ—Ñ—Ñ", isCard: true },
      { amount: 10000, wallet: "79012345678", bank: "–°–±–µ—Ä–±–∞–Ω–∫", isCard: true },
      { amount: 3500, wallet: "79023456789", bank: "–í–¢–ë", isCard: true },
      { amount: 15000, wallet: "79034567890", bank: "–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫", isCard: true },
      { amount: 8000, wallet: "79045678901", bank: "–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫", isCard: true },
      { amount: 2000, wallet: "79056789012", bank: "–¢–∏–Ω—å–∫–æ—Ñ—Ñ", isCard: true },
      { amount: 25000, wallet: "79067890123", bank: "–°–±–µ—Ä–±–∞–Ω–∫", isCard: true },
      { amount: 4500, wallet: "79078901234", bank: "–í–¢–ë", isCard: true },
      { amount: 12000, wallet: "79089012345", bank: "–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫", isCard: true },
      { amount: 6000, wallet: "79090123456", bank: "–û–∑–æ–Ω –ë–∞–Ω–∫", isCard: true }
    ];

    const createdPayouts = [];

    for (let i = 0; i < payoutData.length; i++) {
      const data = payoutData[i];
      const user = users[i % users.length]; // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å 95 —Ä—É–± –∑–∞ USDT
      const rate = 95;
      const amountUsdt = data.amount / rate;
      const total = data.amount;
      const totalUsdt = amountUsdt;

      const payout = await db.payout.create({
        data: {
          merchantId: merchant.id,
          traderId: null, // –ù–µ –Ω–∞–∑–Ω–∞—á–∞–µ–º —Ç—Ä–µ–π–¥–µ—Ä–∞ —Å—Ä–∞–∑—É
          amount: data.amount,
          amountUsdt: amountUsdt,
          total: total,
          totalUsdt: totalUsdt,
          rate: rate,
          wallet: data.wallet,
          bank: data.bank,
          isCard: data.isCard,
          status: PayoutStatus.CREATED, // –í—Å–µ –≤—ã–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–µ–º –≤ —Å—Ç–∞—Ç—É—Å–µ CREATED
          processingTime: 30, // 30 –º–∏–Ω—É—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
          expireAt: new Date(Date.now() + 30 * 60 * 1000) // –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
        }
      });

      createdPayouts.push(payout);
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≤—ã–ø–ª–∞—Ç–∞ #${payout.numericId}: ${data.amount} —Ä—É–± ‚Üí ${data.wallet} (${data.bank})`);
    }

    console.log(`\n‚ú® –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ ${createdPayouts.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤—ã–ø–ª–∞—Ç!`);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`- –í—Å–µ –≤—ã–ø–ª–∞—Ç—ã –≤ —Å—Ç–∞—Ç—É—Å–µ CREATED (–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è)`);
    console.log(`- –í—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ: 30 –º–∏–Ω—É—Ç`);
    console.log(`- –û–±—â–∞—è —Å—É–º–º–∞: ${payoutData.reduce((sum, p) => sum + p.amount, 0).toLocaleString('ru-RU')} —Ä—É–±`);

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—ã–ø–ª–∞—Ç:", error);
  } finally {
    await db.$disconnect();
  }
}

generateSimplePayouts();