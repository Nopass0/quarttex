import { db } from "../src/db";
import { Status, TransactionType, Currency } from "@prisma/client";
import { randomBytes } from "crypto";

// –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–º–µ–Ω –∏ —Ñ–∞–º–∏–ª–∏–π
const firstNames = ["–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "–ú–∏—Ö–∞–∏–ª", "–ò–≤–∞–Ω", "–î–º–∏—Ç—Ä–∏–π", "–ê–Ω–¥—Ä–µ–π", "–°–µ—Ä–≥–µ–π", "–í–ª–∞–¥–∏–º–∏—Ä", "–ù–∏–∫–æ–ª–∞–π", "–ü–∞–≤–µ–ª", "–ê–ª–µ–∫—Å–µ–π"];
const lastNames = ["–ò–≤–∞–Ω–æ–≤", "–ü–µ—Ç—Ä–æ–≤", "–°–∏–¥–æ—Ä–æ–≤", "–°–º–∏—Ä–Ω–æ–≤", "–ö—É–∑–Ω–µ—Ü–æ–≤", "–ü–æ–ø–æ–≤", "–í–∞—Å–∏–ª—å–µ–≤", "–°–æ–∫–æ–ª–æ–≤", "–ú–∏—Ö–∞–π–ª–æ–≤", "–ù–æ–≤–∏–∫–æ–≤"];
const cardNumbers = ["4276", "5536", "4279", "5469", "4255", "4301", "5211", "4272"];
const banks = ["–°–±–µ—Ä–±–∞–Ω–∫", "–¢-–ë–∞–Ω–∫", "–í–¢–ë", "–ê–ª—å—Ñ–∞-–±–∞–Ω–∫", "–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω", "–û—Ç–∫—Ä—ã—Ç–∏–µ"];

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç—ã
function generateCardNumber() {
  const prefix = cardNumbers[Math.floor(Math.random() * cardNumbers.length)];
  return `${prefix} **** **** ${Math.floor(Math.random() * 9000) + 1000}`;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏
function generateFullName() {
  const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];
  const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];
  return `${firstName} ${lastName}`;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Å—É–º–º—ã –æ—Ç 100 –¥–æ 50000
function generateAmount() {
  return Math.floor(Math.random() * 49900) + 100;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –±–∞–Ω–∫–∞
function generateBank() {
  return banks[Math.floor(Math.random() * banks.length)];
}

async function seedTransactions() {
  try {
    console.log("üå± Starting seed process...");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Ä—á–∞–Ω—Ç
    let merchant = await db.merchant.findFirst({
      where: { name: "Test Merchant" }
    });

    // –ï—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º
    if (!merchant) {
      console.log("üì¶ Creating test merchant...");
      merchant = await db.merchant.create({
        data: {
          id: "test-merchant-" + randomBytes(8).toString("hex"),
          name: "Test Merchant",
          token: randomBytes(16).toString("hex"),
          disabled: false,
          banned: false,
          balanceUsdt: 10000
        }
      });
      console.log("‚úÖ Test merchant created:", merchant.name);
    } else {
      console.log("‚úÖ Test merchant already exists:", merchant.name);
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞
    const trader = await db.user.findFirst();
    if (!trader) {
      console.error("‚ùå No trader found in database. Please create a trader first.");
      process.exit(1);
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –º–µ—Ç–æ–¥ CARD
    let method = await db.method.findFirst({
      where: { code: "CARD" }
    });

    if (!method) {
      console.log("üì¶ Creating CARD method...");
      method = await db.method.create({
        data: {
          code: "CARD",
          name: "–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞",
          type: "c2c",
          currency: Currency.rub,
          commissionPayin: 2.5,
          commissionPayout: 2.5,
          maxPayin: 100000,
          minPayin: 100,
          maxPayout: 100000,
          minPayout: 100,
          chancePayin: 90,
          chancePayout: 90,
          isEnabled: true,
          rateSource: "bybit"
        }
      });
      console.log("‚úÖ CARD method created");
    }

    console.log(`üìä Creating 100 IN transactions for trader: ${trader.email}`);

    // –°–æ–∑–¥–∞–µ–º 100 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const transactions = [];
    const now = new Date();

    for (let i = 0; i < 100; i++) {
      // –°–ª—É—á–∞–π–Ω–∞—è –¥–∞—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
      const daysAgo = Math.floor(Math.random() * 30);
      const createdAt = new Date(now.getTime() - daysAgo * 24 * 60 * 60 * 1000);
      
      // –°–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∞—Ç—É—Å (–±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ READY)
      const statusRandom = Math.random();
      let status: Status;
      if (statusRandom < 0.7) {
        status = Status.READY;
      } else if (statusRandom < 0.85) {
        status = Status.CREATED;
      } else if (statusRandom < 0.95) {
        status = Status.IN_PROGRESS;
      } else {
        status = Status.EXPIRED;
      }

      const amount = generateAmount();
      const commission = Math.floor(amount * 0.025); // 2.5% –∫–æ–º–∏—Å—Å–∏—è

      const transaction = {
        merchantId: merchant.id,
        traderId: trader.id,
        amount: amount,
        assetOrBank: generateBank(),
        orderId: `ORDER-${Date.now()}-${i}`,
        methodId: method.id,
        currency: "RUB",
        userId: `user-${Math.random().toString(36).substring(7)}`,
        userIp: `192.168.1.${Math.floor(Math.random() * 255)}`,
        callbackUri: "https://example.com/callback",
        successUri: "https://example.com/success",
        failUri: "https://example.com/fail",
        type: TransactionType.IN,
        expired_at: new Date(createdAt.getTime() + 30 * 60 * 1000), // 30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
        commission: commission,
        clientName: generateFullName(),
        status: status,
        rate: 85 + Math.random() * 10, // –ö—É—Ä—Å –æ—Ç 85 –¥–æ 95
        isMock: false,
        createdAt: createdAt,
        updatedAt: createdAt,
        acceptedAt: status === Status.READY ? new Date(createdAt.getTime() + Math.random() * 20 * 60 * 1000) : null
      };

      transactions.push(transaction);
    }

    // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–∞—Ç—á–∞–º–∏ –ø–æ 10
    console.log("üíæ Inserting transactions...");
    for (let i = 0; i < transactions.length; i += 10) {
      const batch = transactions.slice(i, i + 10);
      await db.transaction.createMany({
        data: batch
      });
      console.log(`‚úÖ Inserted ${i + batch.length} / ${transactions.length} transactions`);
    }

    console.log("üéâ Seed completed successfully!");
    console.log(`üìä Summary:`);
    console.log(`   - Merchant: ${merchant.name}`);
    console.log(`   - Trader: ${trader.email}`);
    console.log(`   - Transactions: ${transactions.length}`);

  } catch (error) {
    console.error("‚ùå Seed failed:", error);
    process.exit(1);
  } finally {
    await db.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º seed
seedTransactions();