import { httpClient } from "../src/utils/httpClient"

async function testEmulatedDeviceConnection() {
  try {
    // –ö–æ–¥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ –æ—à–∏–±–∫–∏
    const deviceCode = "41a9c8c12f176002f36332662a489dedc45afb3e8c0abd9c7a2c1ec97ee12f6d"
    
    console.log("üîå Testing emulated device connection with code:", deviceCode)
    console.log("   Bank type: SBER")
    console.log("   Model: Pixel 7 Pro")
    
    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const response = await httpClient.post("http://localhost:3000/api/device/connect", {
      deviceCode,
      batteryLevel: 85,
      networkInfo: "Wi-Fi",
      deviceModel: "Pixel 7 Pro",
      androidVersion: "13",
      appVersion: "2.0.0",
    })
    
    console.log("\nüì° Response:", JSON.stringify(response, null, 2))
    
    if (response.status === "success" && response.token) {
      console.log("\n‚úÖ Device connected successfully!")
      console.log("   Token:", response.token)
      
      // –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
      console.log("\nüìä Testing device info update...")
      const updateResponse = await httpClient.post(
        "http://localhost:3000/api/device/info/update",
        {
          batteryLevel: 82,
          networkInfo: "4G",
          isCharging: false,
          timestamp: Date.now(),
        },
        {
          headers: {
            Authorization: `Bearer ${response.token}`,
          },
        }
      )
      
      console.log("   Update response:", updateResponse)
      
      // –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      console.log("\nüì¨ Testing notification send...")
      const notificationResponse = await httpClient.post(
        "http://localhost:3000/api/device/notification",
        {
          packageName: "ru.sberbank.android",
          appName: "–°–±–µ—Ä–ë–∞–Ω–∫ –û–Ω–ª–∞–π–Ω",
          title: "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ",
          content: "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ 5,000 ‚ÇΩ –æ—Ç –ò–≤–∞–Ω –ü. –ë–∞–ª–∞–Ω—Å: 25,000 ‚ÇΩ",
          timestamp: Date.now(),
          priority: 1,
          category: "msg",
        },
        {
          headers: {
            Authorization: `Bearer ${response.token}`,
          },
        }
      )
      
      console.log("   Notification response:", notificationResponse)
      
      console.log("\nüéâ All tests passed successfully!")
    } else {
      console.log("\n‚ùå Failed to connect device:", response)
    }
  } catch (error: any) {
    console.error("\n‚ùå Error:", error.message || error)
    if (error.response) {
      console.error("   Response body:", error.response)
    }
    if (error.code) {
      console.error("   Error code:", error.code)
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testEmulatedDeviceConnection()