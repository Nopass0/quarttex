import { httpClient } from "../src/utils/httpClient"
import { db } from "../src/db"

async function recreateDeviceAndEmulator() {
  try {
    console.log("üîÑ Recreating device and configuring emulator...\n")
    
    // 1. –ù–∞–π–¥–µ–º —Ç—Ä–µ–π–¥–µ—Ä–∞
    const trader = await db.user.findFirst({
      where: { email: "trader@example.com" },
      include: {
        devices: true,
        bankDetails: true,
        sessions: {
          where: { expiredAt: { gt: new Date() } },
          orderBy: { createdAt: 'desc' },
          take: 1
        }
      }
    })
    
    if (!trader) {
      console.log("‚ùå Trader not found")
      return
    }
    
    console.log("‚úÖ Found trader:", trader.email)
    console.log(`   Current devices: ${trader.devices.length}`)
    console.log(`   Bank details: ${trader.bankDetails.length}`)
    console.log(`   Active sessions: ${trader.sessions.length}`)
    
    // 2. –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    let sessionToken = trader.sessions[0]?.token
    
    if (!sessionToken) {
      const session = await db.session.create({
        data: {
          token: `recreate-device-${Date.now()}`,
          userId: trader.id,
          ip: "127.0.0.1",
          expiredAt: new Date(Date.now() + 24 * 60 * 60 * 1000)
        }
      })
      sessionToken = session.token
      console.log("üîë Created new session")
    }
    
    // 3. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —á–µ—Ä–µ–∑ API —Ç—Ä–µ–π–¥–µ—Ä–∞
    console.log("\nüì± Creating new device...")
    
    const newDevice = await httpClient.post(
      "http://localhost:3000/api/trader/devices",
      {
        name: "Emulated Device for Notification Testing"
      },
      {
        headers: { "x-trader-token": sessionToken }
      }
    )
    
    console.log("‚úÖ Device created:")
    console.log(`   ID: ${newDevice.id}`)
    console.log(`   Name: ${newDevice.name}`)
    console.log(`   Token: ${newDevice.token.substring(0, 20)}...`)
    
    // 4. –°–æ–∑–¥–∞–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Ä–µ–∫–≤–∏–∑–∏—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    let bankDetailId = trader.bankDetails[0]?.id
    
    if (!bankDetailId) {
      console.log("\nüè¶ Creating bank detail...")
      
      const bankDetail = await httpClient.post(
        "http://localhost:3000/api/trader/bank-details",
        {
          cardNumber: "4444555566667777",
          bankType: "SBER", // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –º–∞–ø–ø–∏—Ç—å—Å—è –≤ SBERBANK
          methodType: "c2c",
          recipientName: "–≠–º—É–ª—è—Ü–∏–æ–Ω–Ω—ã–π –¢–µ—Å—Ç",
          phoneNumber: "+79001234567",
          minAmount: 100,
          maxAmount: 50000,
          dailyLimit: 500000,
          monthlyLimit: 5000000,
          intervalMinutes: 0,
          deviceId: newDevice.id // –°—Ä–∞–∑—É –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
        },
        {
          headers: { "x-trader-token": sessionToken }
        }
      )
      
      console.log("‚úÖ Bank detail created and linked to device")
      bankDetailId = bankDetail.id
    } else {
      // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–∫–≤–∏–∑–∏—Ç –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
      await httpClient.post(
        "http://localhost:3000/api/trader/devices/link",
        {
          deviceId: newDevice.id,
          bankDetailId: bankDetailId
        },
        {
          headers: { "x-trader-token": sessionToken }
        }
      )
      
      console.log("‚úÖ Linked existing bank detail to device")
    }
    
    // 5. –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log("\nüí∞ Creating test transactions for matching...")
    
    const testAmounts = [1000, 2500, 5000, 7500, 10000, 15000, 25000, 50000]
    const createdTransactions = []
    
    for (const amount of testAmounts) {
      try {
        const transaction = await db.transaction.create({
          data: {
            amount,
            currency: "RUB",
            status: "CREATED", // –ê–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            type: "IN",
            bankDetailId: bankDetailId,
            userId: trader.id,
            merchantTransactionId: `emulation-test-${amount}-${Date.now()}`,
            description: `Test transaction for emulation: ${amount} RUB`,
            metadata: {
              testTransaction: true,
              createdForEmulation: true,
              emulationTest: true
            }
          }
        })
        
        createdTransactions.push(transaction)
        console.log(`   ‚úÖ Created transaction: ${amount} RUB (${transaction.id})`)
        
      } catch (error) {
        console.log(`   ‚ö†Ô∏è  Could not create transaction ${amount}: ${error}`)
      }
    }
    
    console.log(`\n‚úÖ Created ${createdTransactions.length} test transactions`)
    
    // 6. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Device Emulator Service
    console.log("\nü§ñ Configuring Device Emulator Service...")
    
    const emulatorConfig = {
      global: {
        defaultPingSec: 20, // –ë—ã—Å—Ç—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        defaultNotifyChance: 0.9, // 90% —à–∞–Ω—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        defaultSpamChance: 0.05, // 5% —Å–ø–∞–º
        defaultDelayChance: 0.1,
        reconnectOnAuthError: true,
        rngSeed: Date.now()
      },
      devices: [
        {
          deviceCode: newDevice.token, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
          bankType: "SBER", // –î–ª—è —à–∞–±–ª–æ–Ω–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
          model: newDevice.name,
          androidVersion: "13",
          initialBattery: 85,
          pingSec: 15, // –ö–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
          notifyChance: 0.95, // 95% —à–∞–Ω—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!
          spamChance: 0.03, // 3% —Å–ø–∞–º
          delayChance: 0.1,
          // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ —à–∞–Ω—Å–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
          testAmounts: testAmounts
        }
      ]
    }
    
    await db.serviceConfig.upsert({
      where: { serviceKey: "device_emulator" },
      create: {
        serviceKey: "device_emulator",
        config: emulatorConfig,
        isEnabled: true,
      },
      update: {
        config: emulatorConfig,
        isEnabled: true,
      }
    })
    
    console.log("‚úÖ Device Emulator Service configured")
    console.log(`   Device token: ${newDevice.token.substring(0, 20)}...`)
    console.log("   Notification frequency: every 15 seconds")
    console.log("   Notification chance: 95%")
    console.log("   Test amounts:", testAmounts.slice(0, 5), "...")
    
    // 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log("\nüîå Testing device connection...")
    
    try {
      const connectResponse = await httpClient.post("http://localhost:3000/api/device/connect", {
        deviceCode: newDevice.token,
        batteryLevel: 85,
        networkInfo: "Wi-Fi",
        deviceModel: newDevice.name,
        androidVersion: "13",
        appVersion: "2.0.0",
      })
      
      console.log("‚úÖ Device connection successful!")
      console.log(`   Returned token: ${connectResponse.token.substring(0, 20)}...`)
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –æ–¥–Ω–æ–π –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—É–º–º
      const testAmount = testAmounts[0]
      console.log(`\nüì¨ Sending test notification with amount ${testAmount}...`)
      
      const notificationResponse = await httpClient.post(
        "http://localhost:3000/api/device/notification",
        {
          packageName: "ru.sberbank.android",
          appName: "–°–±–µ—Ä–ë–∞–Ω–∫ –û–Ω–ª–∞–π–Ω",
          title: "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ",
          content: `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ ${testAmount.toLocaleString('ru-RU')} ‚ÇΩ –æ—Ç –≠–º—É–ª—è—Ü–∏—è –¢. –ë–∞–ª–∞–Ω—Å: ${(testAmount * 3).toLocaleString('ru-RU')} ‚ÇΩ`,
          timestamp: Date.now(),
          priority: 1,
          category: "msg",
        },
        {
          headers: {
            Authorization: `Bearer ${connectResponse.token}`,
          },
        }
      )
      
      console.log("‚úÖ Test notification sent - should match with transaction!")
      
    } catch (error: any) {
      console.log("‚ùå Device connection failed:", error.message)
    }
    
    // 8. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
    console.log("\nüéâ Setup Complete!")
    console.log("\nüìä Summary:")
    console.log(`   ‚úÖ Device created: ${newDevice.name}`)
    console.log(`   ‚úÖ Bank detail linked: –≠–º—É–ª—è—Ü–∏–æ–Ω–Ω—ã–π –¢–µ—Å—Ç`)
    console.log(`   ‚úÖ Test transactions: ${createdTransactions.length} amounts`)
    console.log(`   ‚úÖ Emulator configured: 95% notification rate every 15s`)
    console.log(`   ‚úÖ Connection tested: Device can receive notifications`)
    
    console.log("\nüìã Expected Behavior:")
    console.log("   - Device Emulator Service sends notifications every ~15-20 seconds")
    console.log("   - 95% of notifications use real transaction amounts")
    console.log("   - High chance of successful notification-transaction matching")
    console.log("   - Notification matching service should detect many matches")
    
    console.log("\n‚ö° Monitor:")
    console.log("   - Service logs for emulator operation")
    console.log("   - Notification matching service for successful matches")
    console.log("   - Database notifications table for new entries")
    
  } catch (error: any) {
    console.error("\n‚ùå Error:", error.message || error)
  } finally {
    await db.$disconnect()
  }
}

recreateDeviceAndEmulator()