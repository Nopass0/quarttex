#!/usr/bin/env bun
import { db } from '../src/db';
import { randomBytes } from 'crypto';

async function createTestMerchant() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–µ—Ä—á–∞–Ω—Ç–∞...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π –º–µ—Ä—á–∞–Ω—Ç
  let merchant = await db.merchant.findFirst({
    where: { name: 'test' }
  });
  
  if (merchant) {
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ä—á–∞–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:');
    console.log(`   ID: ${merchant.id}`);
    console.log(`   –ò–º—è: ${merchant.name}`);
    console.log(`   –¢–æ–∫–µ–Ω: ${merchant.token}`);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${merchant.disabled ? '–û—Ç–∫–ª—é—á–µ–Ω' : '–ê–∫—Ç–∏–≤–µ–Ω'}`);
    return merchant;
  }
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–µ—Ä—á–∞–Ω—Ç–∞
  const token = randomBytes(32).toString('hex');
  merchant = await db.merchant.create({
    data: {
      name: 'test',
      token: token,
      disabled: false,
      banned: false,
      balanceUsdt: 10000 // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    }
  });
  
  console.log('‚ú® –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –º–µ—Ä—á–∞–Ω—Ç:');
  console.log(`   ID: ${merchant.id}`);
  console.log(`   –ò–º—è: ${merchant.name}`);
  console.log(`   –¢–æ–∫–µ–Ω: ${merchant.token}`);
  console.log(`   –ë–∞–ª–∞–Ω—Å: ${merchant.balanceUsdt} USDT`);
  
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –º–µ—Ä—á–∞–Ω—Ç—É
  const methods = await db.method.findMany({
    where: { isEnabled: true }
  });
  
  console.log(`\nüìù –ù–∞–π–¥–µ–Ω–æ ${methods.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤`);
  
  for (const method of methods) {
    const existing = await db.merchantMethod.findUnique({
      where: {
        merchantId_methodId: {
          merchantId: merchant.id,
          methodId: method.id
        }
      }
    });
    
    if (!existing) {
      await db.merchantMethod.create({
        data: {
          merchantId: merchant.id,
          methodId: method.id,
          isEnabled: true
        }
      });
      console.log(`   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –º–µ—Ç–æ–¥: ${method.name} (${method.code})`);
    }
  }
  
  console.log('\nüéâ –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ä—á–∞–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
  console.log('\nüìå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤:');
  console.log(`   ${merchant.token}`);
  
  return merchant;
}

createTestMerchant()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  });