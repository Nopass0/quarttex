import { httpClient } from "../src/utils/httpClient"
import { db } from "../src/db"
import { randomBytes } from "crypto"

async function testDeviceFlow() {
  try {
    console.log("üß™ Testing new device flow...\n")
    
    // 1. –°–æ–∑–¥–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–∞
    const trader = await db.user.findFirst({
      where: { email: "trader@example.com" }
    })
    
    if (!trader) {
      console.log("‚ùå Trader not found")
      return
    }
    
    console.log("‚úÖ Found trader:", trader.id)
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const deviceToken = randomBytes(32).toString('hex')
    console.log("üîë Generated device token:", deviceToken)
    
    // –°–æ–∑–¥–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –ë–î (–∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç UI —Ç—Ä–µ–π–¥–µ—Ä–∞)
    const device = await db.device.create({
      data: {
        name: "Test Device (Emulated)",
        token: deviceToken,
        userId: trader.id,
        isOnline: false,
        emulated: true
      }
    })
    
    console.log("‚úÖ Created device:", {
      id: device.id,
      name: device.name,
      token: device.token
    })
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏
    const bankDetails = await db.bankDetail.findMany({
      where: {
        userId: trader.id,
        isArchived: false
      }
    })
    
    console.log(`\nüìä Found ${bankDetails.length} bank details for trader`)
    
    if (bankDetails.length === 0) {
      console.log("üìù Creating bank detail...")
      await db.bankDetail.create({
        data: {
          userId: trader.id,
          methodType: "c2c",
          bankType: "SBERBANK",
          cardNumber: "4444555566667777",
          recipientName: "Test Trader",
          phoneNumber: "+79001234567",
          minAmount: 100,
          maxAmount: 50000,
          dailyLimit: 500000,
          monthlyLimit: 5000000,
          intervalMinutes: 0,
          isArchived: false
        }
      })
    }
    
    // 3. –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —ç–º—É–ª—è—Ç–æ—Ä–∞ —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
    console.log("\nü§ñ Updating Device Emulator Service config...")
    
    const emulatorConfig = {
      global: {
        defaultPingSec: 30,
        defaultNotifyChance: 0.7,
        defaultSpamChance: 0.05,
        defaultDelayChance: 0.1,
        reconnectOnAuthError: true,
        rngSeed: Date.now()
      },
      devices: [
        {
          deviceCode: deviceToken, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
          bankType: "SBER",
          model: "Pixel 7 Pro",
          androidVersion: "13",
          initialBattery: 85,
          pingSec: 30,
          notifyChance: 0.8,
          spamChance: 0.1,
          delayChance: 0.1
        }
      ]
    }
    
    await db.serviceConfig.update({
      where: { serviceKey: "device_emulator" },
      data: { 
        config: emulatorConfig,
        isEnabled: true
      }
    })
    
    console.log("‚úÖ Updated emulator config with device token")
    
    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    console.log("\nüîå Testing device connection...")
    
    const connectResponse = await httpClient.post("http://localhost:3000/api/device/connect", {
      deviceCode: deviceToken,
      batteryLevel: 85,
      networkInfo: "Wi-Fi",
      deviceModel: "Pixel 7 Pro",
      androidVersion: "13",
      appVersion: "2.0.0",
    })
    
    console.log("üì° Connect response:", JSON.stringify(connectResponse, null, 2))
    
    if (connectResponse.status === "success") {
      console.log("\n‚úÖ Device connected successfully!")
      console.log("   Token:", connectResponse.token)
      
      // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      console.log("\nüìä Testing device info update...")
      const updateResponse = await httpClient.post(
        "http://localhost:3000/api/device/info/update",
        {
          batteryLevel: 82,
          networkInfo: "4G",
          isCharging: false,
          timestamp: Date.now(),
        },
        {
          headers: {
            Authorization: `Bearer ${connectResponse.token}`,
          },
        }
      )
      
      console.log("   Update response:", updateResponse)
      
      // 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      console.log("\nüì¨ Testing notification send...")
      const notificationResponse = await httpClient.post(
        "http://localhost:3000/api/device/notification",
        {
          packageName: "ru.sberbank.android",
          appName: "–°–±–µ—Ä–ë–∞–Ω–∫ –û–Ω–ª–∞–π–Ω",
          title: "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ",
          content: "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ 5,000 ‚ÇΩ –æ—Ç –ò–≤–∞–Ω –ü. –ë–∞–ª–∞–Ω—Å: 25,000 ‚ÇΩ",
          timestamp: Date.now(),
          priority: 1,
          category: "msg",
        },
        {
          headers: {
            Authorization: `Bearer ${connectResponse.token}`,
          },
        }
      )
      
      console.log("   Notification response:", notificationResponse)
      
      // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –ë–î
      const updatedDevice = await db.device.findUnique({
        where: { id: device.id },
        include: {
          notifications: {
            take: 5,
            orderBy: { createdAt: 'desc' }
          }
        }
      })
      
      console.log("\nüì± Device status after connection:")
      console.log("   Online:", updatedDevice?.isOnline)
      console.log("   Energy:", updatedDevice?.energy)
      console.log("   Last active:", updatedDevice?.lastActiveAt)
      console.log("   Notifications:", updatedDevice?.notifications.length)
      
      console.log("\nüéâ Device flow test completed successfully!")
    } else {
      console.log("\n‚ùå Failed to connect device:", connectResponse)
    }
    
  } catch (error: any) {
    console.error("\n‚ùå Error:", error.message || error)
    if (error.response) {
      console.error("   Response:", error.response)
    }
  } finally {
    await db.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testDeviceFlow()