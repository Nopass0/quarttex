import { httpClient } from "../src/utils/httpClient"
import { db } from "../src/db"

async function testBankDetailCreation() {
  try {
    console.log("üß™ Testing bank detail creation with SBER type...\n")
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–π–¥–µ—Ä–∞
    const trader = await db.user.findFirst({
      where: { email: "trader@example.com" }
    })
    
    if (!trader) {
      console.log("‚ùå Trader not found")
      return
    }
    
    console.log("‚úÖ Found trader:", trader.email)
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–∞
    const traderSession = await db.session.create({
      data: {
        token: `test-bank-session-${Date.now()}`,
        userId: trader.id,
        ip: "127.0.0.1",
        expiredAt: new Date(Date.now() + 24 * 60 * 60 * 1000)
      }
    })
    
    console.log("üîë Created trader session:", traderSession.token)
    
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–¥–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    console.log("\nüì± Creating device first...")
    const createDeviceResponse = await httpClient.post(
      "http://localhost:3000/api/trader/devices", 
      {
        name: "Test Device for Bank Detail"
      },
      {
        headers: {
          "x-trader-token": traderSession.token
        }
      }
    )
    
    console.log("‚úÖ Device created:", createDeviceResponse.id)
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞ —Å —Ç–∏–ø–æ–º SBER
    console.log("\nüè¶ Creating bank detail with SBER type...")
    
    const createBankDetailResponse = await httpClient.post(
      "http://localhost:3000/api/trader/bank-details",
      {
        cardNumber: "1111111111111111",
        bankType: "SBER", // –§—Ä–æ–Ω—Ç–µ–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç SBER
        methodType: "c2c",
        recipientName: "–¢–µ—Å—Ç–æ–≤–∏—á –¢–µ—Å—Ç",
        phoneNumber: "+79999999999",
        minAmount: 100,
        maxAmount: 50000,
        dailyLimit: 500000,
        monthlyLimit: 5000000,
        intervalMinutes: 0,
        deviceId: createDeviceResponse.id
      },
      {
        headers: {
          "x-trader-token": traderSession.token
        }
      }
    )
    
    console.log("üì° Bank detail creation response:", JSON.stringify(createBankDetailResponse, null, 2))
    
    if (createBankDetailResponse.id) {
      console.log("\n‚úÖ Bank detail created successfully!")
      console.log("   ID:", createBankDetailResponse.id)
      console.log("   Bank Type:", createBankDetailResponse.bankType)
      console.log("   Card Number:", createBankDetailResponse.cardNumber)
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const bankDetailInDb = await db.bankDetail.findUnique({
        where: { id: createBankDetailResponse.id }
      })
      
      console.log("\nüîç Checking in database:")
      console.log("   Bank Type in DB:", bankDetailInDb?.bankType)
      console.log("   Should be: SBERBANK")
      
      if (bankDetailInDb?.bankType === "SBERBANK") {
        console.log("‚úÖ Bank type mapping works correctly!")
      } else {
        console.log("‚ùå Bank type mapping failed!")
      }
      
    } else {
      console.log("\n‚ùå Failed to create bank detail")
    }
    
  } catch (error: any) {
    console.error("\n‚ùå Error:", error.message || error)
    if (error.response) {
      console.error("   Response:", error.response)
    }
  } finally {
    await db.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testBankDetailCreation()