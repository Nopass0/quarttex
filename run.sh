#!/bin/bash

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Get the script's directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$SCRIPT_DIR"

echo -e "${BLUE}Starting Development Environment...${NC}"

# Check and setup local environment files
if [ ! -f "backend/.env" ]; then
    echo -e "${YELLOW}Creating backend/.env for local development...${NC}"
    
    # Check if user wants to use external database
    echo -e "${BLUE}Database Configuration:${NC}"
    echo -e "1) Use local PostgreSQL (default)"
    echo -e "2) Use external database URL"
    read -t 10 -p "Choose option (1-2): " DB_CHOICE || DB_CHOICE=1
    
    if [ "$DB_CHOICE" = "2" ]; then
        echo -e "${YELLOW}Enter your external DATABASE_URL:${NC}"
        read DATABASE_URL
        cat > backend/.env << EOF
DATABASE_URL="$DATABASE_URL"
JWT_SECRET="local-jwt-secret-key-change-in-production"
PORT=3001
NODE_ENV=development
SUPER_ADMIN_KEY="local-admin-key"
EOF
    else
        cat > backend/.env << 'EOF'
DATABASE_URL="postgresql://postgres:password@localhost:5432/chase"
JWT_SECRET="local-jwt-secret-key-change-in-production"
PORT=3001
NODE_ENV=development
SUPER_ADMIN_KEY="local-admin-key"
EOF
    fi
fi

if [ ! -f "frontend/.env.local" ]; then
    echo -e "${YELLOW}Creating frontend/.env.local for local development...${NC}"
    cat > frontend/.env.local << 'EOF'
NEXT_PUBLIC_API_URL=http://localhost:3001
EOF
fi

# Check if using local database
if grep -q "localhost\|127.0.0.1" backend/.env 2>/dev/null; then
    # Check PostgreSQL
    if ! command -v psql &> /dev/null; then
        echo -e "${RED}PostgreSQL not found. Please install PostgreSQL first.${NC}"
        exit 1
    fi

    # Check if PostgreSQL is running
    if ! pg_isready -q -h localhost; then
        echo -e "${RED}PostgreSQL is not running. Please start PostgreSQL first.${NC}"
        exit 1
    fi

    # Create database if not exists
    echo -e "${BLUE}Checking local database...${NC}"
    psql -U postgres -h localhost -tc "SELECT 1 FROM pg_database WHERE datname = 'chase'" | grep -q 1 || {
        echo -e "${YELLOW}Creating database 'chase'...${NC}"
        psql -U postgres -h localhost -c "CREATE DATABASE chase"
    }
else
    echo -e "${BLUE}Using external database${NC}"
fi

# Check if backend dependencies are installed
if [ ! -d "backend/node_modules" ]; then
    echo -e "${YELLOW}Installing backend dependencies...${NC}"
    (cd backend && bun install)
fi

# Check if frontend dependencies are installed
if [ ! -d "frontend/node_modules" ]; then
    echo -e "${YELLOW}Installing frontend dependencies...${NC}"
    (cd frontend && npm install)
fi

# Generate Prisma Client and run migrations
echo -e "${BLUE}Setting up database schema...${NC}"
(cd backend && npx prisma generate && npx prisma migrate deploy)

# Function to cleanup on exit
cleanup() {
    echo -e "\n${YELLOW}Shutting down...${NC}"
    kill $BACKEND_PID $FRONTEND_PID 2>/dev/null
    exit
}

# Set trap to cleanup on script exit
trap cleanup EXIT INT TERM

# Start backend
echo -e "${GREEN}Starting backend on port 3001...${NC}"
(cd backend && bun run dev) &
BACKEND_PID=$!

# Wait a bit for backend to start
sleep 3

# Get admin key from backend logs or environment
if [ -f "backend/.env" ] && grep -q "SUPER_ADMIN_KEY" "backend/.env"; then
    ADMIN_KEY=$(grep "SUPER_ADMIN_KEY" "backend/.env" | cut -d '=' -f 2 | tr -d '"' | tr -d "'")
    echo -e "${RED}=====================================${NC}"
    echo -e "${RED}MASTER ADMIN KEY: ${ADMIN_KEY}${NC}"
    echo -e "${RED}=====================================${NC}"
else
    echo -e "${YELLOW}Note: Dynamic admin key will be generated by backend${NC}"
    echo -e "${YELLOW}Check backend logs for the session admin key${NC}"
fi

# Start frontend
echo -e "${GREEN}Starting frontend on port 3000...${NC}"
(cd frontend && npm run dev) &
FRONTEND_PID=$!

echo -e "${BLUE}Development environment is running!${NC}"
echo -e "${GREEN}Backend: http://localhost:3001${NC}"
echo -e "${GREEN}Frontend: http://localhost:3000${NC}"
echo -e "${YELLOW}Press Ctrl+C to stop all services${NC}"

# Wait for background processes
wait